name: Release Java CLI

on:
  push:
    branches: [ "feature/exe" ]

jobs:
  tag-version:
    name: Tag new version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v3.5.3
        id: checkout-code
        name: Checkout code
        with:
          ref: ${{ github.sha }}

      # Create a new tag on main after merge
      - name: Get all tags
        id: get_tags
        run: git fetch --tags origin

      - name: Find previous tag
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1.3.0
        with:
          prefix: v
          fallback: v0.0.0 # would be the first tag auto created if there are no previous tags

      - name: Calculate next version
        id: semvers
        uses: WyriHaximus/github-action-next-semvers@v1.2.1
        with:
          version: ${{ steps.previous_tag.outputs.tag }}

      - name: Create new patch
        id: create_tag
        uses: rickstaa/action-create-tag@v1.6.2
        with:
          tag: ${{ steps.semvers.outputs.v_patch }} # semvers outputs all next versions like major, minor and patch with optional v.
          commit_sha: ${{ github.sha }}

    outputs:
      nextTag: ${{ steps.semvers.outputs.v_patch }}

  build-windows-installer:
    name: Build Installer on Windows
    needs: [tag-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3.5.3
        id: checkout-code
        name: Checkout code
        with:
          ref: ${{ github.sha }}

      # SETUP BUILD ENVIRONMENT
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        

      - name: Build with Gradle Wrapper
        run: |
          cd BeanHub.Client
          ./gradlew
          ./gradlew shadowJar

      - name: Extract version
        id: extract_version
        run: |
          $version = "${{ needs.tag-version.outputs.nextTag }}"
          $versionNumber = $version.Substring(1)
          Write-Host "Extracted Version: $versionNumber"
          echo "##[set-output name=version_number]$versionNumber"          

      # PACKAGE FOR DISTRIBUTION
      - id: package
        name: Package Installer
        run: |
          cd BeanHub.Client
          jpackage --verbose `
            --about-url https://github.com/BEAN-Tastic/Bean-Tastic-CLI `
            --input ./app/build/libs `
            --main-jar app-all.jar `
            --name Beanss `
            --description "" `
            --dest app/build/distributions `
            --vendor BeanTastic `
            --app-version ${{ steps.extract_version.outputs.version_number }} `
            --win-console `
            --win-dir-chooser `
            --win-menu `
            --win-shortcut `
            --win-shortcut-prompt

      # SAVE INSTALLER
      - id: upload-installer
        name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          path: ./app/build/distributions/Beanss.exe
          name: windows-installer
          retention-days: 1
    outputs:
      version_number: ${{ steps.extract_version.outputs.version_number }}



  create-release:
    name: Create Release
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [tag-version, build-windows-installer]
    steps:

      # DOWNLOAD INSTALLERS
      - id: download-windows-installer
        name: Download Windows installer
        uses: actions/download-artifact@v3
        with:
          name: windows-installer

      # CREATE GITHUB RELEASE AND ADD ASSETS
      - id: create-release
        name: Create GitHub release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag-version.outputs.nextTag }}
          release_name: ${{ needs.tag-version.outputs.nextTag }}
          draft: false
          prerelease: false

      - id: release-windows-installer
        name: Release Windows installer
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Beanss.exe
          asset_name: Beanss.exe
          asset_content_type: application/x-binary